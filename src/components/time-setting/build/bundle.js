/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/components/time-setting/dev/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/components/time-setting/dev/index.js":
/*!**************************************************!*\
  !*** ./src/components/time-setting/dev/index.js ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _time_setting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../time-setting */ \"./src/components/time-setting/time-setting.js\");\n/* eslint-disable no-console */\n\nvar timeSetting = new _time_setting__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\ndocument.body.appendChild(timeSetting.getNodeElement());\ntimeSetting.show();\n\nfunction printEventNameAndTime(_ref) {\n  var time = _ref.time,\n      eventName = _ref.eventName;\n  console.log(eventName, time);\n}\n\ntimeSetting.addTimeChangeListener(printEventNameAndTime);\ntimeSetting.addTimeCancelListener(printEventNameAndTime);\ntimeSetting.addTimeDoneListener(printEventNameAndTime);\n\nfunction doneCancelHandler() {\n  timeSetting.hide();\n  setTimeout(function () {\n    return timeSetting.show();\n  }, 1000);\n}\n\ntimeSetting.addTimeCancelListener(doneCancelHandler);\ntimeSetting.addTimeDoneListener(doneCancelHandler);\nwindow.timeSetting = timeSetting;\n\n//# sourceURL=webpack:///./src/components/time-setting/dev/index.js?");

/***/ }),

/***/ "./src/components/time-setting/time-setting.js":
/*!*****************************************************!*\
  !*** ./src/components/time-setting/time-setting.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _script_Util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../script/Util */ \"./src/script/Util.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* eslint-disable no-underscore-dangle */\n\n/**\r\n * time-setting component used on Android v4.4.4 Alarm Clock\r\n * @requires Util\r\n */\n\nvar TimeSetting =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * The time-setting constructor call the right methods to build a\r\n   * time-setting component and assign event handlers to it.\r\n   * @constructor\r\n   */\n  function TimeSetting() {\n    _classCallCheck(this, TimeSetting);\n\n    this._time = {\n      hour: 6,\n      minute: 0,\n      meridium: 'AM'\n    };\n    this._previous = {\n      hour: 6,\n      minute: 0,\n      meridium: 'AM'\n    };\n    this._timeChangeCallbackList = [];\n    this._timeCancelCallbackList = [];\n    this._timeDoneCallbackList = [];\n    this._isTouch = _script_Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTouch();\n\n    this._createTimeSettingElement();\n\n    this._createMostFrequentlyUsedElementsShortcuts();\n\n    this._addEventListenerToElements();\n\n    this._makeKeyboardListeners();\n  }\n  /**\r\n   * Create a time-setting DOM element with className of time-setting.\r\n   */\n\n\n  _createClass(TimeSetting, [{\n    key: \"_createTimeSettingElement\",\n    value: function _createTimeSettingElement() {\n      this.nodeElement = _script_Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createNodeElement(\"<div class=\\\"time-setting\\\" data-display-status=\\\"hide\\\"><div class=\\\"setting-container\\\" data-meridium=\\\"\".concat(this._time.meridium, \"\\\" data-hour=\\\"\").concat(this._time.hour, \"\\\" data-minute=\\\"\").concat(this._time.minute, \"\\\" data-select=\\\"hour\\\" data-skip-animation=\\\"false\\\"><div class=\\\"time-container\\\"><span class=\\\"hour\\\">\").concat(this._time.hour, \"</span><span class=\\\"separator\\\">:</span><span class=\\\"minute\\\">\").concat(this._time.minute < 10 ? \"0\".concat(this._time.minute) : this._time.minute, \"</span><span class=\\\"am\\\">AM</span><span class=\\\"pm\\\">PM</span></div><div class=\\\"disc-container\\\"><div class=\\\"am-button\\\">AM</div><div class=\\\"hour-disc\\\" data-active=\\\"false\\\"><div class=\\\"hour\\\">1</div><div class=\\\"hour\\\">2</div><div class=\\\"hour\\\">3</div><div class=\\\"hour\\\">4</div><div class=\\\"hour\\\">5</div><div class=\\\"hour\\\">6</div><div class=\\\"hour\\\">7</div><div class=\\\"hour\\\">8</div><div class=\\\"hour\\\">9</div><div class=\\\"hour\\\">10</div><div class=\\\"hour\\\">11</div><div class=\\\"hour\\\">12</div><div class=\\\"minute\\\">00</div><div class=\\\"minute\\\">05</div><div class=\\\"minute\\\">10</div><div class=\\\"minute\\\">15</div><div class=\\\"minute\\\">20</div><div class=\\\"minute\\\">25</div><div class=\\\"minute\\\">30</div><div class=\\\"minute\\\">35</div><div class=\\\"minute\\\">40</div><div class=\\\"minute\\\">45</div><div class=\\\"minute\\\">50</div><div class=\\\"minute\\\">55</div><div class=\\\"hour-selector-disc\\\"><div class=\\\"dot\\\"></div></div><div class=\\\"hour-selector-axis\\\"></div><div class=\\\"minute-selector-disc\\\"><div class=\\\"dot\\\"></div></div><div class=\\\"minute-selector-axis\\\"></div></div><div class=\\\"pm-button\\\">PM</div></div><div class=\\\"done-container\\\"><span>Done</span></div></div></div>\"));\n    }\n    /**\r\n     * Create references to the most used elements in order\r\n     * to improve performance and code readability.\r\n     */\n\n  }, {\n    key: \"_createMostFrequentlyUsedElementsShortcuts\",\n    value: function _createMostFrequentlyUsedElementsShortcuts() {\n      // eslint-disable-next-line prefer-destructuring\n      this._settingContainer = this.nodeElement.children[0]; // eslint-disable-next-line prefer-destructuring\n\n      this._hourElement = this.nodeElement.children[0].children[0].children[0]; // eslint-disable-next-line prefer-destructuring\n\n      this._minuteElement = this.nodeElement.children[0].children[0].children[2]; // eslint-disable-next-line prefer-destructuring\n\n      this._hourDisc = this.nodeElement.children[0].children[1].children[1]; // eslint-disable-next-line prefer-destructuring\n\n      this._amButton = this.nodeElement.children[0].children[1].children[0]; // eslint-disable-next-line prefer-destructuring\n\n      this._pmButton = this.nodeElement.children[0].children[1].children[2]; // eslint-disable-next-line prefer-destructuring\n\n      this._doneButton = this.nodeElement.children[0].children[2]; // eslint-disable-next-line prefer-destructuring\n\n      this._hourSelectorDisc = this.nodeElement.children[0].children[1].children[1].children[24]; // eslint-disable-next-line prefer-destructuring\n\n      this._minuteSelectorDisc = this.nodeElement.children[0].children[1].children[1].children[26];\n    }\n    /**\r\n     * Add event listeners to all clickable / touchable elements.\r\n     */\n\n  }, {\n    key: \"_addEventListenerToElements\",\n    value: function _addEventListenerToElements() {\n      this._addEventListenerToDiscSelectors();\n\n      this._addEventListenerToHour();\n\n      this._addEventListenerToMinute();\n\n      this._addEventListenerToMeridiumButtons();\n\n      this._addEventListenerToTimeSettingBackground();\n\n      this._addEventListenerToKeyboard();\n\n      this._addEventListenerToDoneButton();\n    }\n    /**\r\n     * Create a keyboard handler mapping object where some keyboard keys\r\n     * maps to an event handler.\r\n     */\n\n  }, {\n    key: \"_makeKeyboardListeners\",\n    value: function _makeKeyboardListeners() {\n      this._keyboardEventHalder = {\n        Escape: this._handleCancelEvent,\n        Enter: this._handleDoneEvent\n      };\n    }\n    /**\r\n     * Get the time-setting DOM element.\r\n     * @returns {Object} The actual time-setting DOM element.\r\n     */\n\n  }, {\n    key: \"getNodeElement\",\n    value: function getNodeElement() {\n      return this.nodeElement;\n    }\n    /**\r\n     * Get the time setting.\r\n     * @returns {Object} time in { hour, minute, meridium } format.\r\n     */\n\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      return {\n        hour: this._time.hour,\n        minute: this._time.minute,\n        meridium: this._time.meridium\n      };\n    }\n    /**\r\n     * Get the current time set in the attributes.\r\n     * @returns {Object} time in { hour, minute, meridium } format.\r\n     */\n\n  }, {\n    key: \"_getAttributesTime\",\n    value: function _getAttributesTime() {\n      return {\n        hour: parseInt(this._settingContainer.getAttribute('data-hour'), 10),\n        minute: parseInt(this._settingContainer.getAttribute('data-minute'), 10),\n        meridium: this._settingContainer.getAttribute('data-meridium').toLocaleUpperCase()\n      };\n    }\n    /**\r\n     * Change the current time. Also, if any invalid data is passed, this\r\n     * method will ignore it and will change only the right properties. Also, it\r\n     * will fire a time-change event if any time setting changes.\r\n     * @param {Object} - the new time in the { hour, minute, meridium } format\r\n     */\n\n  }, {\n    key: \"setTime\",\n    value: function setTime(_ref) {\n      var hour = _ref.hour,\n          minute = _ref.minute,\n          meridium = _ref.meridium;\n\n      var prev = this._getAttributesTime();\n\n      this._validateAndSetHour(hour);\n\n      this._validateAndSetMinute(minute);\n\n      this._validateAndSetMeridium(meridium);\n\n      var curr = this._getAttributesTime();\n\n      if (prev.hour !== curr.hour || prev.minute !== curr.minute || prev.meridium !== curr.meridium) {\n        this._callChangeListeners();\n      }\n    }\n    /**\r\n     * If the hour argument is ranging from 0 to 12, then the current\r\n     * hour setting will be changed. Note: 0 will be automatic converted to 12.\r\n     * @param {Number} hour - the new hour ranging from 0 to 12.\r\n     */\n\n  }, {\n    key: \"_validateAndSetHour\",\n    value: function _validateAndSetHour(hour) {\n      if (typeof hour === 'number' && hour >= 0 && hour <= 12) {\n        var hourFormatted = Math.round(hour) || 12;\n\n        this._settingContainer.setAttribute('data-hour', hourFormatted);\n\n        this._hourElement.innerText = hourFormatted;\n        this._time.hour = hourFormatted;\n        this._previous.hour = hourFormatted;\n      }\n    }\n    /**\r\n     * If the minute argument is ranging from 0 to 59, then the current\r\n     * minute setting will be changed. Note: 60 will not be accepted.\r\n     * @param {Number} minute - the new minute ranging from 0 to 59.\r\n     */\n\n  }, {\n    key: \"_validateAndSetMinute\",\n    value: function _validateAndSetMinute(minute) {\n      if (typeof minute === 'number' && minute >= 0 && minute < 60) {\n        var minuteFormmated = Math.round(minute);\n\n        this._settingContainer.setAttribute('data-minute', minuteFormmated);\n\n        this._minuteElement.innerText = minuteFormmated < 10 ? \"0\".concat(minuteFormmated) : minuteFormmated;\n        this._time.minute = minuteFormmated;\n        this._previous.minute = minuteFormmated;\n      }\n    }\n    /**\r\n     * If the meridium argument is in the accepted form, which is 'AM'\r\n     * or 'PM' case-insensitive, the current meridium value will be changed.\r\n     * @param {String} meridium - the new meridium value ('AM' or 'PM').\r\n     */\n\n  }, {\n    key: \"_validateAndSetMeridium\",\n    value: function _validateAndSetMeridium(meridium) {\n      if (typeof meridium !== 'string') return;\n      var meridiumFormatted = meridium.toLocaleUpperCase();\n\n      if (meridiumFormatted === 'AM' || meridiumFormatted === 'PM') {\n        this._settingContainer.setAttribute('data-meridium', meridiumFormatted);\n\n        this._time.meridium = meridiumFormatted;\n        this._previous.meridium = meridiumFormatted;\n      }\n    }\n    /**\r\n     * Add event listeners to enable the hour and minute selectors to be dragged\r\n     * in the screen and change current the time setting.\r\n     */\n\n  }, {\n    key: \"_addEventListenerToDiscSelectors\",\n    value: function _addEventListenerToDiscSelectors() {\n      var _this = this;\n\n      var hourMousedownHandler = function hourMousedownHandler() {\n        _this._enableDiscMovement('hour');\n\n        _this._settingContainer.setAttribute('data-skip-animation', 'true');\n\n        _this._hourDisc.setAttribute('data-active', 'true');\n      };\n\n      var minuteMousedownHandler = function minuteMousedownHandler() {\n        _this._enableDiscMovement('minute');\n\n        _this._settingContainer.setAttribute('data-skip-animation', 'true');\n\n        _this._hourDisc.setAttribute('data-active', 'true');\n      };\n\n      var startEvent = this._isTouch ? 'touchstart' : 'mousedown';\n\n      this._hourSelectorDisc.addEventListener(startEvent, hourMousedownHandler);\n\n      this._minuteSelectorDisc.addEventListener(startEvent, minuteMousedownHandler);\n    }\n    /**\r\n     * Enable hour buttons to change to the target hour when clicked or touched.\r\n     */\n\n  }, {\n    key: \"_addEventListenerToHour\",\n    value: function _addEventListenerToHour() {\n      var _this2 = this;\n\n      var hourDiscChildren = this._hourDisc.children;\n      var hourKeys = Object.keys(hourDiscChildren).filter(function (k) {\n        return hourDiscChildren[k].className === 'hour';\n      });\n      var startEvent = this._isTouch ? 'touchstart' : 'mousedown';\n      hourKeys.forEach(function (k) {\n        hourDiscChildren[k].addEventListener(startEvent, function (event) {\n          _this2._handleHourClick(event);\n\n          _this2._hourDisc.setAttribute('data-active', 'true');\n        });\n      });\n\n      this._hourElement.addEventListener('click', function () {\n        _this2._settingContainer.setAttribute('data-select', 'hour');\n      });\n    }\n    /**\r\n     * Enable minute buttons to change to the target minute when clicked or touched.\r\n     */\n\n  }, {\n    key: \"_addEventListenerToMinute\",\n    value: function _addEventListenerToMinute() {\n      var _this3 = this;\n\n      var hourDiscChildren = this._hourDisc.children;\n      var minuteKeys = Object.keys(hourDiscChildren).filter(function (k) {\n        return hourDiscChildren[k].className === 'minute';\n      });\n      var startEvent = this._isTouch ? 'touchstart' : 'mousedown';\n      minuteKeys.forEach(function (k) {\n        hourDiscChildren[k].addEventListener(startEvent, function (event) {\n          _this3._handleMinuteClick(event);\n\n          _this3._hourDisc.setAttribute('data-active', 'true');\n        });\n      });\n\n      this._minuteElement.addEventListener('click', function () {\n        _this3._settingContainer.setAttribute('data-select', 'minute');\n      });\n    }\n    /**\r\n     * Enable meridium buttons to change the current meridium value.\r\n     */\n\n  }, {\n    key: \"_addEventListenerToMeridiumButtons\",\n    value: function _addEventListenerToMeridiumButtons() {\n      var _this4 = this;\n\n      this._amButton.addEventListener('click', function () {\n        _this4._setMeridiumAttributeAndHandleTimeChange('AM');\n      });\n\n      this._pmButton.addEventListener('click', function () {\n        _this4._setMeridiumAttributeAndHandleTimeChange('PM');\n      });\n    }\n    /**\r\n     * Add click listener to time-setting background in order to fire\r\n     * time-cancel events.\r\n     */\n\n  }, {\n    key: \"_addEventListenerToTimeSettingBackground\",\n    value: function _addEventListenerToTimeSettingBackground() {\n      var _this5 = this;\n\n      this.nodeElement.addEventListener('click', function (event) {\n        if (event.target.className === 'time-setting') {\n          _this5._handleCancelEvent();\n        }\n      });\n    }\n    /**\r\n     * Add keydown listener to window and call the right method from\r\n     * this._keyboardEventHandler object on each event.\r\n     */\n\n  }, {\n    key: \"_addEventListenerToKeyboard\",\n    value: function _addEventListenerToKeyboard() {\n      var _this6 = this;\n\n      var handleKeyDown = function handleKeyDown(_ref2) {\n        var key = _ref2.key;\n        var handler = _this6._keyboardEventHalder[key];\n\n        if (handler) {\n          handler.bind(_this6)();\n        }\n      };\n\n      window.addEventListener('keydown', handleKeyDown);\n    }\n    /**\r\n     * Add a event listener to the click event on Done button and when fired,\r\n     * the event listener call the time-done listerners.\r\n     */\n\n  }, {\n    key: \"_addEventListenerToDoneButton\",\n    value: function _addEventListenerToDoneButton() {\n      this._doneButton.addEventListener('click', this._handleDoneEvent.bind(this));\n    }\n    /**\r\n     * Update the current time setting and call the time-done event listeners.\r\n     */\n\n  }, {\n    key: \"_handleDoneEvent\",\n    value: function _handleDoneEvent() {\n      var time = this._getAttributesTime();\n\n      this._validateAndSetHour(time.hour);\n\n      this._validateAndSetMinute(time.minute);\n\n      this._validateAndSetMeridium(time.meridium);\n\n      this._settingContainer.setAttribute('data-select', 'hour');\n\n      this._settingContainer.setAttribute('data-skip-animation', false);\n\n      this._callDoneListeners();\n    }\n    /**\r\n     * Restore the setting-container attributes to the previous value.\r\n     */\n\n  }, {\n    key: \"_restoreSettingAttributes\",\n    value: function _restoreSettingAttributes() {\n      var hourFormatted = this._time.hour || 12;\n      var minuteFormmated = this._time.minute < 10 ? \"0\".concat(this._time.minute) : this._time.minute;\n\n      this._settingContainer.setAttribute('data-hour', hourFormatted);\n\n      this._hourElement.innerText = hourFormatted;\n\n      this._settingContainer.setAttribute('data-minute', this._time.minute);\n\n      this._minuteElement.innerText = minuteFormmated;\n\n      this._settingContainer.setAttribute('data-meridium', this._time.meridium);\n\n      this._settingContainer.setAttribute('data-select', 'hour');\n\n      this._settingContainer.setAttribute('data-skip-animation', false);\n    }\n    /**\r\n     * Add event listeners to track mouse or touch movement over the hour\r\n     * or minute disc selector according to the type argument.\r\n     * @param {String} type - disc selector type can be 'hour' or 'minute'\r\n     */\n\n  }, {\n    key: \"_enableDiscMovement\",\n    value: function _enableDiscMovement(type) {\n      var _this7 = this;\n\n      var movementHandler = this._getDiscMovementMethod(type);\n\n      var moveEvent = this._isTouch ? 'touchmove' : 'mousemove';\n      window.addEventListener(moveEvent, movementHandler);\n\n      var handleMouseup = function handleMouseup() {\n        _this7._handleWindowMouseupTouchend();\n\n        window.removeEventListener('mousemove', movementHandler);\n        window.removeEventListener('mouseup', handleMouseup);\n      };\n\n      var handleTouchend = function handleTouchend() {\n        _this7._handleWindowMouseupTouchend();\n\n        window.removeEventListener('touchmove', movementHandler);\n        window.removeEventListener('touchend', handleTouchend);\n      };\n\n      if (this._isTouch) {\n        window.addEventListener('touchend', handleTouchend);\n      } else {\n        window.addEventListener('mouseup', handleMouseup);\n      }\n    }\n    /**\r\n     * Enable disc movement animation once again and change to minute setting.\r\n     */\n\n  }, {\n    key: \"_handleWindowMouseupTouchend\",\n    value: function _handleWindowMouseupTouchend() {\n      this._settingContainer.setAttribute('data-skip-animation', 'false');\n\n      this._settingContainer.setAttribute('data-select', 'minute');\n\n      this._hourDisc.setAttribute('data-active', 'false');\n    }\n    /**\r\n     * Restore the previous attribute settings and call time-cancel event listeners.\r\n     */\n\n  }, {\n    key: \"_handleCancelEvent\",\n    value: function _handleCancelEvent() {\n      this._restoreSettingAttributes();\n\n      this._callCancelListeners();\n    }\n    /**\r\n     * Get the correct disc movement handler according to the type\r\n     * argument. If 'hour', then _handleHourDiscMovement is returned.\r\n     * Otherwise, if type is 'minute', then _handleMinuteDiscMovement is returned.\r\n     * @param {String} type - 'hour' or 'minute'\r\n     * @returns {Object} The right handler method accordingly to the type argument.\r\n     */\n\n  }, {\n    key: \"_getDiscMovementMethod\",\n    value: function _getDiscMovementMethod(type) {\n      return (// eslint-disable-next-line no-nested-ternary\n        type === 'hour' ? this._handleHourDiscMovement.bind(this) : type === 'minute' ? this._handleMinuteDiscMovement.bind(this) : null\n      );\n    }\n    /**\r\n     * Calculate the hour based on the hour-selector-disc current angle and set it\r\n     * accordingly.\r\n     * @param {Object} event - DOM event.\r\n     */\n\n  }, {\n    key: \"_handleHourDiscMovement\",\n    value: function _handleHourDiscMovement(event) {\n      var coordinates = event.touches ? event.touches[0] : event;\n\n      var angle = this._getSelectorAngle(coordinates);\n\n      var hour = (12 - Math.round(angle / (360 / 12)) + 3) % 12;\n\n      this._setHourAttributeAndHandleTimeChange(hour);\n    }\n    /**\r\n     * Calculate the minute based on the minute-selector-disc current angle and set it\r\n     * accordingly.\r\n     * @param {Object} event - DOM event.\r\n     */\n\n  }, {\n    key: \"_handleMinuteDiscMovement\",\n    value: function _handleMinuteDiscMovement(event) {\n      var coordinates = event.touches ? event.touches[0] : event;\n\n      var angle = this._getSelectorAngle(coordinates);\n\n      var minute = (60 - Math.round(angle / (360 / 60)) + 15) % 60;\n\n      this._setMinuteAttributeAndHandleTimeChange(minute);\n    }\n    /**\r\n     * Handle an hour click event by changing the hour setting to the target hour.\r\n     * @param {Object} event - DOM event.\r\n     */\n\n  }, {\n    key: \"_handleHourClick\",\n    value: function _handleHourClick(event) {\n      var hour = parseInt(event.target.innerText, 10);\n\n      this._settingContainer.setAttribute('data-skip-animation', 'true');\n\n      this._setHourAttributeAndHandleTimeChange(hour);\n\n      this._enableDiscMovement('hour');\n    }\n    /**\r\n     * Handle a minute click event by changing the minute setting to the target minute.\r\n     * @param {Object} event - DOM event.\r\n     */\n\n  }, {\n    key: \"_handleMinuteClick\",\n    value: function _handleMinuteClick(event) {\n      var minute = parseInt(event.target.innerText, 10);\n\n      this._settingContainer.setAttribute('data-skip-animation', 'true');\n\n      this._setMinuteAttributeAndHandleTimeChange(minute);\n\n      this._enableDiscMovement('minute');\n    }\n    /**\r\n     * Set the current data-hour attribute value and call the\r\n     * time-change event listeners if the hour was changed.\r\n     * @param {Number} hour - the new hour value\r\n     */\n\n  }, {\n    key: \"_setHourAttributeAndHandleTimeChange\",\n    value: function _setHourAttributeAndHandleTimeChange(hour) {\n      var hourFormatted = hour || 12;\n\n      this._settingContainer.setAttribute('data-hour', hourFormatted);\n\n      this._hourElement.innerText = hourFormatted;\n\n      if (hourFormatted !== this._previous.hour) {\n        this._previous.hour = hourFormatted;\n\n        this._callChangeListeners();\n      }\n    }\n    /**\r\n     * Set the current data-minute attribute value and call the\r\n     * time-change event listeners if the minute was changed.\r\n     * @param {Number} minute - the new minute value\r\n     */\n\n  }, {\n    key: \"_setMinuteAttributeAndHandleTimeChange\",\n    value: function _setMinuteAttributeAndHandleTimeChange(minute) {\n      this._settingContainer.setAttribute('data-minute', \"\".concat(minute));\n\n      this._minuteElement.innerText = minute < 10 ? \"0\".concat(minute) : minute;\n\n      if (minute !== this._previous.minute) {\n        this._previous.minute = minute;\n\n        this._callChangeListeners();\n      }\n    }\n    /**\r\n     * Set the current data-meridium attribute value and call the\r\n     * time-change event listeners if the meridium was changed.\r\n     * @param {String} meridium - the new meridium value\r\n     */\n\n  }, {\n    key: \"_setMeridiumAttributeAndHandleTimeChange\",\n    value: function _setMeridiumAttributeAndHandleTimeChange(meridium) {\n      this._settingContainer.setAttribute('data-meridium', meridium);\n\n      if (meridium !== this._previous.meridium) {\n        this._previous.meridium = meridium;\n\n        this._callChangeListeners();\n      }\n    }\n    /**\r\n     * Calculated the selector-disc angle in degrees.\r\n     * @param {Object} coordinates - selector-disc coordinates {x, y}\r\n     * @returns {Number} Calculated angle in degrees\r\n     */\n\n  }, {\n    key: \"_getSelectorAngle\",\n    value: function _getSelectorAngle(_ref3) {\n      var endX = _ref3.clientX,\n          endY = _ref3.clientY;\n\n      var _this$_getHourDiscCen = this._getHourDiscCenter(),\n          startX = _this$_getHourDiscCen.x,\n          startY = _this$_getHourDiscCen.y;\n\n      var deltaX = endX - startX;\n      var deltaY = startY - endY;\n      var RAD_TO_DEG = 360 / (2 * Math.PI);\n      var angleDeg = Math.atan(Math.abs(deltaY) / Math.abs(deltaX)) * RAD_TO_DEG;\n      var angleComplete = // eslint-disable-next-line no-nested-ternary\n      deltaX >= 0 && deltaY >= 0 ? angleDeg // eslint-disable-next-line no-nested-ternary\n      : deltaX <= 0 && deltaY >= 0 ? 90 - angleDeg + 90 : deltaX <= 0 && deltaY <= 0 ? angleDeg + 180 : 90 - angleDeg + 270;\n      return Math.round(angleComplete);\n    }\n    /**\r\n     * Get the hour-disc element current center coordinates.\r\n     * @returns {Object} hour-disc center coordinates {x, y}\r\n     */\n\n  }, {\n    key: \"_getHourDiscCenter\",\n    value: function _getHourDiscCenter() {\n      var _this$_hourDisc$getBo = this._hourDisc.getBoundingClientRect(),\n          x = _this$_hourDisc$getBo.x,\n          y = _this$_hourDisc$getBo.y;\n\n      var _getComputedStyle = getComputedStyle(this._hourDisc),\n          width = _getComputedStyle.width,\n          height = _getComputedStyle.height;\n\n      var w = parseInt(width, 10);\n      var h = parseInt(height, 10);\n      return {\n        x: x + w / 2,\n        y: y + h / 2\n      };\n    }\n    /**\r\n     * Enable the time-setting DOM element visibility by changing its data-display-status\r\n     * property to show.\r\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.nodeElement.setAttribute('data-display-status', 'show');\n    }\n    /**\r\n     * Disable the time-setting DOM element visibility by changing its data-display-status\r\n     * property to hide.\r\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.nodeElement.setAttribute('data-display-status', 'hide');\n    }\n    /**\r\n     * Register a new time-change event listener.<br>\r\n     * When a time-change event happens, the callback functions will be called\r\n     * receiving as a parameter an object with the following properties:\r\n     <pre>\r\n    time: current time {hour, minute, meridium}\r\n    target: TimeSetting object\r\n    event: 'time-change'\r\n     </pre>\r\n     * @param {Function} callback - Function to be called every time the selected time\r\n     * changes.\r\n     */\n\n  }, {\n    key: \"addTimeChangeListener\",\n    value: function addTimeChangeListener(callback) {\n      var sameCallbacks = this._timeChangeCallbackList.filter(function (c) {\n        return c === callback;\n      });\n\n      if (sameCallbacks.length) return;\n\n      this._timeChangeCallbackList.push(callback);\n    }\n    /**\r\n     * Remove a previously added time-change event listener.\r\n     * @param {Function} callback - Function registered as a time-change event listener\r\n     * that's going to be removed.\r\n     */\n\n  }, {\n    key: \"removeTimeChangeListener\",\n    value: function removeTimeChangeListener(callback) {\n      for (var i = this._timeChangeCallbackList.length - 1; i >= 0; i -= 1) {\n        if (this._timeChangeCallbackList[i] === callback) {\n          this._timeChangeCallbackList.splice(i, 1);\n        }\n      }\n    }\n    /**\r\n     * Call every listener registered for time-change event.\r\n     */\n\n  }, {\n    key: \"_callChangeListeners\",\n    value: function _callChangeListeners() {\n      var _this8 = this;\n\n      this._timeChangeCallbackList.forEach(function (callback) {\n        return callback({\n          time: _this8._getAttributesTime(),\n          target: _this8,\n          eventName: 'time-change'\n        });\n      });\n    }\n    /**\r\n     * Register a new time-cancel event listener.<br>\r\n     * When a time-cancel event happens, the callback functions will be called\r\n     * receiving as a parameter an object with the following properties:\r\n     <pre>\r\n    time: current time {hour, minute, meridium}\r\n    target: TimeSetting object\r\n    event: 'time-cancel'\r\n     </pre>\r\n     * @param {Function} callback - Function to be called when the time setting is\r\n     * canceled.\r\n     */\n\n  }, {\n    key: \"addTimeCancelListener\",\n    value: function addTimeCancelListener(callback) {\n      var sameCallbacks = this._timeCancelCallbackList.filter(function (c) {\n        return c === callback;\n      });\n\n      if (sameCallbacks.length) return;\n\n      this._timeCancelCallbackList.push(callback);\n    }\n    /**\r\n     * Remove a previously added time-cancel event listener.\r\n     * @param {Function} callback - Function registered as a time-cancel event listener\r\n     * that's going to be removed.\r\n     */\n\n  }, {\n    key: \"removeTimeCancelListener\",\n    value: function removeTimeCancelListener(callback) {\n      for (var i = this._timeCancelCallbackList.length - 1; i >= 0; i -= 1) {\n        if (this._timeCancelCallbackList[i] === callback) {\n          this._timeCancelCallbackList.splice(i, 1);\n        }\n      }\n    }\n    /**\r\n     * Call every listener registered for time-cancel event.\r\n     */\n\n  }, {\n    key: \"_callCancelListeners\",\n    value: function _callCancelListeners() {\n      var _this9 = this;\n\n      this._timeCancelCallbackList.forEach(function (callback) {\n        return callback({\n          time: _this9._getAttributesTime(),\n          target: _this9,\n          eventName: 'time-cancel'\n        });\n      });\n    }\n    /**\r\n     * Register a new time-done event listener.<br>\r\n     * When a time-done event happens, the callback functions will be called\r\n     * receiving as a parameter an object with the following properties:\r\n     <pre>\r\n    time: current time {hour, minute, meridium}\r\n    target: TimeSetting object\r\n    event: 'time-done'\r\n     </pre>\r\n     * @param {Function} callback - Function to be called when the time setting is\r\n     * done.\r\n     */\n\n  }, {\n    key: \"addTimeDoneListener\",\n    value: function addTimeDoneListener(callback) {\n      var sameCallbacks = this._timeDoneCallbackList.filter(function (c) {\n        return c === callback;\n      });\n\n      if (sameCallbacks.length) return;\n\n      this._timeDoneCallbackList.push(callback);\n    }\n    /**\r\n     * Remove a previously added time-done event listener.\r\n     * @param {Function} callback - Function registered as a time-done event listener\r\n     * that's going to be removed.\r\n     */\n\n  }, {\n    key: \"removeTimeDoneListener\",\n    value: function removeTimeDoneListener(callback) {\n      for (var i = this._timeDoneCallbackList.length - 1; i >= 0; i -= 1) {\n        if (this._timeDoneCallbackList[i] === callback) {\n          this._timeDoneCallbackList.splice(i, 1);\n        }\n      }\n    }\n    /**\r\n     * Call every listener registered for time-done event.\r\n     */\n\n  }, {\n    key: \"_callDoneListeners\",\n    value: function _callDoneListeners() {\n      var _this10 = this;\n\n      this._timeDoneCallbackList.forEach(function (callback) {\n        return callback({\n          time: _this10._getAttributesTime(),\n          target: _this10,\n          eventName: 'time-done'\n        });\n      });\n    }\n  }]);\n\n  return TimeSetting;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (TimeSetting);\n\n//# sourceURL=webpack:///./src/components/time-setting/time-setting.js?");

/***/ }),

/***/ "./src/script/Util.js":
/*!****************************!*\
  !*** ./src/script/Util.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Util; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Util =\n/*#__PURE__*/\nfunction () {\n  function Util() {\n    _classCallCheck(this, Util);\n  }\n\n  _createClass(Util, null, [{\n    key: \"addListenerToEvents\",\n    value: function addListenerToEvents(target, events, eventHandler) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      events.forEach(function (event) {\n        return target.addEventListener(event, eventHandler, options);\n      });\n    }\n  }, {\n    key: \"removeListenerToEvents\",\n    value: function removeListenerToEvents(target, events, eventHandler) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      events.forEach(function (event) {\n        return target.removeEventListener(event, eventHandler, options);\n      });\n    }\n  }, {\n    key: \"isAncestor\",\n    value: function isAncestor(ancestor, element) {\n      if (!element || !ancestor) return false;\n\n      for (var e = element.parentElement; e; e = e.parentElement) {\n        if (e === ancestor) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"nodeListToArray\",\n    value: function nodeListToArray(nodeList) {\n      if (!nodeList || !(nodeList.length > 0)) return [];\n      return Object.keys(nodeList).map(function (k) {\n        return nodeList[k];\n      });\n    }\n  }, {\n    key: \"isDescendant\",\n    value: function isDescendant(descendant, element) {\n      return Util.isAncestor(element, descendant);\n    }\n  }, {\n    key: \"filterAncestors\",\n    value: function filterAncestors(element, nodeList) {\n      return Util.nodeListToArray(nodeList).filter(function (e) {\n        return Util.isAncestor(e, element);\n      });\n    }\n  }, {\n    key: \"filterDescendants\",\n    value: function filterDescendants(element, nodeList) {\n      return Util.nodeListToArray(nodeList).filter(function (e) {\n        return Util.isDescendant(e, element);\n      });\n    }\n  }, {\n    key: \"createNodeElement\",\n    value: function createNodeElement(html) {\n      var node = document.createElement('div');\n      node.innerHTML = html;\n      return node.children.length === 1 ? node.children[0] : node.children;\n    } // function extracted from https://stackoverflow.com/questions/4817029\n\n  }, {\n    key: \"isTouch\",\n    value: function isTouch() {\n      var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n\n      var mq = function mq(query) {\n        return window.matchMedia(query).matches;\n      }; // eslint-disable-next-line no-undef\n\n\n      if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {\n        return true;\n      } // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n      // https://git.io/vznFH\n\n\n      var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\n      return mq(query);\n    }\n  }]);\n\n  return Util;\n}();\n\n\n\n//# sourceURL=webpack:///./src/script/Util.js?");

/***/ })

/******/ });